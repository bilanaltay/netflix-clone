"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-bq8kejo8y5hg0qa4q#xey_!yl)ol+2sx=9&6za_r+-s^mcf(=*'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'movies',
    'recommendations',
    'users',
    'rest_framework',
    'rest_framework_simplejwt',  # JWT için gerekli
    "rest_framework_simplejwt.token_blacklist", # Kullanıcı çıkış yaptığında refresh token'ı geçersiz hale getirmek için blacklist özelliğini etkinleştireceğiz.
    'corsheaders',
]



MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ALLOW_ALL_ORIGINS = True  # Tüm domainlerden gelen isteklere izin ver
ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',  # PostgreSQL motoru
        'NAME': 'postgres',  # Veritabanı adı
        'USER': 'postgres',  # PostgreSQL kullanıcı adı
        'PASSWORD': 'Q4m6vmc!ANYBhz3p',  # PostgreSQL şifresi
        'HOST': '45.147.47.224',  # Uzak sunucunun IP adresi
        'PORT': '5432',  # PostgreSQL varsayılan portu
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}

AUTH_USER_MODEL = 'users.User'


#TOKEN İŞLEMLERİ OTURUM SÜRESİNİ UZATMA REFRESH İLE YENİLEME ARKA PLANDA
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=1),  # Access Token süresi
    "REFRESH_TOKEN_LIFETIME": timedelta(days=365),  # Refresh Token süresi
    "ROTATE_REFRESH_TOKENS": True,  # Refresh token yenilendiğinde yeni bir refresh token üret
    "BLACKLIST_AFTER_ROTATION": True,  # Eski refresh token'ı geçersiz yap
    "AUTH_HEADER_TYPES": ("Bearer",),  # Authorization header tipi
}


# ACCESS_TOKEN_LIFETIME: Kullanıcının API'ye erişim sağlamak için geçerli olan token'ın süresi. Bu örnekte 1 saat.
# REFRESH_TOKEN_LIFETIME: Kullanıcının oturum açmayı yenilemek için kullanabileceği refresh token'ın süresi. Bu örnekte 30 gün.
# ROTATE_REFRESH_TOKENS: Refresh token kullanıldığında yeni bir refresh token oluşturulur.
# BLACKLIST_AFTER_ROTATION: Eski refresh token'ı geçersiz yapar (blacklist'e ekler).
